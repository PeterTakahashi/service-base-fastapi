name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4

      # Sendria を起動
      - name: Start Sendria in background
        run: |
          docker run -d \
            --name sendria \
            -p 1025:1025 \
            -p 1080:1080 \
            msztolcman/sendria:v2.2.2.0

      # Sendria のヘルスチェック (ポート応答確認)
      - name: Wait for Sendria to be ready
        run: |
          until curl -s http://localhost:1080 > /dev/null; do
            echo "Waiting for Sendria..."
            sleep 1
          done
          echo "Sendria is ready!"

      # MinIO バイナリのインストール
      - name: Install MinIO
        run: |
          wget https://dl.min.io/server/minio/release/linux-amd64/minio
          chmod +x minio
          sudo mv minio /usr/local/bin

      # MinIO の起動 (username/passwordを環境変数で指定)
      - name: Start MinIO in background
        run: |
          export MINIO_ROOT_USER=admin
          export MINIO_ROOT_PASSWORD=password
          nohup minio server /tmp/minio-data --console-address ":9001" >minio.log 2>&1 &

      # MinIO のヘルスチェック
      - name: Wait for MinIO to be ready
        run: |
          until [ "$(curl -s -o /dev/null -w ''%{http_code}'' http://127.0.0.1:9000/minio/health/live)" = "200" ]; do
            echo "Waiting for minio..."
            sleep 1
          done
          echo "MinIO is ready!"

      # MinIO Client (mc) でバケットを作成
      - name: Setup MinIO buckets
        run: |
          # mc (minio client) をDockerで単発実行する例
          docker run --network host --entrypoint sh --rm minio/mc -c "
            mc alias set local http://127.0.0.1:9000 admin password &&
            mc mb local/fastapi-app-test
          "

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl g++ wget ffmpeg libsm6 libxext6 gimp libvulkan1 cargo libpq-dev
          # (省略) ここ以降はすでにある手順
          curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR="$HOME/.local/bin" sh
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          uv python install 3.11.11
          uv venv
          uv pip install .
          uv pip install --group dev

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 1
          done

      - name: Execute init.sql
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -f ./docker/init.sql

      - name: Load .env.ci
        run: |
          cp .env.ci .env.test

      - name: Run database migrations
        run: |
          ls -la
          echo "Running migrations..."
          source .venv/bin/activate
          ENV=test alembic upgrade head

      - name: Test with coverage
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=term-missing --cov-report=html
        timeout-minutes: 5

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/

      - name: Ruff *.py files
        run: |
          source .venv/bin/activate
          ruff check .

      - name: mypy
        run: |
          source .venv/bin/activate
          mypy --config-file mypy.ini .

      - name: Lint *.py files
        if: always()
        continue-on-error: true
        run: |
          source .venv/bin/activate
          pylint $(git ls-files '*.py')
