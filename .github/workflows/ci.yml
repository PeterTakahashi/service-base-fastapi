name: CI

on:
  push:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "manga_translator/**"
      - "test/**"
      - "requirements.txt"
      - "requirements-dev.txt"
  pull_request:
    branches: [main]
    paths:
      - ".github/workflows/ci.yml"
      - "manga_translator/**"
      - "test/**"
      - "requirements.txt"
      - "requirements-dev.txt"
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    strategy:
      matrix:
        python-version: ["3.10"] # Add more Python versions if needed
      fail-fast: false
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v3
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          source .venv/bin/activate
          uv pip install -r requirements.txt
          uv pip install -r requirements-dev.txt
      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 1
          done
      - name: Execute init.sql
        run: |
            PGPASSWORD=postgres psql -h localhost -U postgres -f ./docker/init.sql
      - name: Load .env.ci
        run: |
          cp .env.ci .env.test
      - name: Run database migrations
        run: |
          source .venv/bin/activate
          ENV=test alembic upgrade head
      - name: Test
        run: |
          source .venv/bin/activate
          pytest
        timeout-minutes: 5
      - name: Lint *.py files
        run: |
          source .venv/bin/activate
          pylint $(git ls-files '*.py')
        if: always()
        continue-on-error: true # to not fail CI on lint errors
