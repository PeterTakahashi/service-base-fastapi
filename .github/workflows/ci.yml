name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:17
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
      minio:
        image: minio/minio
        ports:
          - 9000:9000
        env:
          MINIO_ROOT_USER: admin
          MINIO_ROOT_PASSWORD: password
        command: ["server", "/data", "--address", ":9000", "--console-address", ":9090"]
        options: >-
          --health-cmd="curl -f http://localhost:9000/minio/health/ready || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Setup environment
        run: |
          sudo apt-get update
          sudo apt-get install -y curl g++ wget ffmpeg libsm6 libxext6 gimp libvulkan1 cargo libpq-dev
          curl -LsSf https://astral.sh/uv/install.sh | env UV_INSTALL_DIR="$HOME/.local/bin" sh
          echo "PATH=$HOME/.local/bin:$PATH" >> $GITHUB_ENV
      - name: Init MinIO buckets
        run: |
          curl -O https://dl.min.io/client/mc/release/linux-amd64/mc
          chmod +x mc
          ./mc alias set local http://localhost:9000 admin password
          ./mc mb local/manga-translator-test
      - name: Install dependencies
        run: |
          uv python install 3.10.16
          uv venv
          uv pip install .
          uv pip install --group dev

      - name: Wait for PostgreSQL to be ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for postgres..."
            sleep 1
          done
      - name: Execute init.sql
        run: |
          PGPASSWORD=postgres psql -h localhost -U postgres -f ./docker/init.sql
      - name: Load .env.ci
        run: |
          cp .env.ci .env.test
      - name: Run database migrations
        run: |
          ls -la
          echo "Running migrations..."
          source .venv/bin/activate
          ENV=test alembic upgrade head
      - name: Test with coverage
        run: |
          source .venv/bin/activate
          pytest --cov=app --cov-report=term-missing --cov-report=html
        timeout-minutes: 5
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: htmlcov/
      - name: Lint *.py files
        run: |
          source .venv/bin/activate
          pylint $(git ls-files '*.py')
        if: always()
        continue-on-error: true # to not fail CI on lint errors
      - name: Ruff *.py files
        run: |
          source .venv/bin/activate
          ruff check .
        if: always()
        continue-on-error: true # to not fail CI on lint errors
      - name: mypy
        run: |
          source .venv/bin/activate
          mypy --config-file mypy.ini .
        if: always()
        continue-on-error: true # to not fail CI on lint errors
